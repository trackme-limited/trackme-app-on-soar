name: Release Workflow

on:
  push:
    branches:
      - main

jobs:
  create_release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3 # Updated to latest version

      - name: Set up Python
        uses: actions/setup-python@v3 # Updated to latest version
        with:
          python-version: "3.x"

      - name: Install dependencies
        run: python -m pip install --upgrade pip

      - name: Extract version from trackme.json
        run: |
          echo "Reading version information..."
          version_full=$(python -c "import json; file = open('trackme.json'); data = json.load(file); file.close(); print(data['app_version'])")
          version_id=$(python -c "import json; file = open('trackme.json'); data = json.load(file); file.close(); print(data['app_version'].replace('.', ''))")
          echo "version=${version_full}" >> $GITHUB_ENV
          echo "version_id=${version_id}" >> $GITHUB_ENV

      - name: Compress files
        run: |
          tar --exclude='./.git' \
            --exclude='./.github' \
            --exclude='./.gitignore' \
            -czvf trackme_${{ env.version_id }}.tgz *

      - name: Get release notes
        run: |
          release_notes=$(cat release_notes/${{ env.version }}.md)
          echo "release_notes<<EOF" >> $GITHUB_ENV
          echo "${release_notes}" >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1 # Check if there's an updated version
        env:
          GITHUB_TOKEN: ${{ secrets.SOAR_APPS_TOKEN }}
        with:
          tag_name: ${{ env.version }}
          release_name: Version ${{ env.version }}
          body: ${{ env.release_notes }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1 # Check if there's an updated version
        env:
          GITHUB_TOKEN: ${{ secrets.SOAR_APPS_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./trackme_${{ env.version_id }}.tgz
          asset_name: trackme_${{ env.version_id }}.tgz
          asset_content_type: application/gzip
