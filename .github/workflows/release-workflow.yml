name: Release Workflow

on:
  push:
    branches:
      - main

jobs:
  create_release:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3 # Updated to latest version

      - name: Set up Python
        uses: actions/setup-python@v3 # Updated to latest version
        with:
          python-version: "3.x"

      - name: Install Python dependencies
        run: python -m pip install --upgrade pip

      - name: Install Ansible
        run: |
          sudo apt update
          sudo apt install -y ansible

      - name: Install Required Ansible Collections
        run: |
          ansible-galaxy collection install ansible.posix
          ansible-galaxy collection install community.docker
          ansible-galaxy collection install community.general

      - name: Extract version from trackme.json
        run: |
          echo "Reading version information..."
          version_full=$(python -c "import json; file = open('trackme.json'); data = json.load(file); file.close(); print(data['app_version'])")
          version_id=$(python -c "import json; file = open('trackme.json'); data = json.load(file); file.close(); print(data['app_version'].replace('.', ''))")
          echo "version=${version_full}" >> $GITHUB_ENV
          echo "version_id=${version_id}" >> $GITHUB_ENV

      - name: Compress files
        run: |
          tar --exclude='./.git' \
            --exclude='./.github' \
            --exclude='./.gitignore' \
            -czvf trackme_${{ env.version_id }}.tgz *

      - name: Calculate SHA256 checksum
        run: |
          echo "Calculating SHA256 checksum..."
          sha256sum=$(sha256sum trackme_${{ env.version_id }}.tgz | awk '{print $1}')
          echo "sha256=$sha256sum" >> $GITHUB_ENV
          echo $sha256sum > release-sha256.txt

      - name: Get release notes
        run: |
          release_notes=$(cat release_notes/${{ env.version }}.md)
          echo "SHA256: ${sha256}" >> $GITHUB_ENV
          echo "${release_notes}" >> $GITHUB_ENV

      - name: Create Release
        id: create_release
        uses: actions/create-release@v1 # Check if there's an updated version
        env:
          GITHUB_TOKEN: ${{ secrets.SOAR_APPS_TOKEN }}
        with:
          tag_name: ${{ env.version }}
          release_name: Version ${{ env.version }}
          body: ${{ env.release_notes }}
          draft: false
          prerelease: false

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1 # Check if there's an updated version
        env:
          GITHUB_TOKEN: ${{ secrets.SOAR_APPS_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./trackme_${{ env.version_id }}.tgz
          asset_name: trackme_${{ env.version_id }}.tgz
          asset_content_type: application/gzip

      #
      # Upload release to the release site
      #

      - name: Upload to release site
        # main branch only
        if: ${{ !contains(github.event.head_commit.message, '#nopublish') && github.ref == 'refs/heads/main' }}
        uses: appleboy/scp-action@master
        env:
          VERSION_NUMBER: ${{ env.VERSION_NUMBER }}
        with:
          host: ${{ secrets.RELEASE_SITE_HOST }}
          username: ${{ secrets.RELEASE_SITE_USER }}
          key: ${{ secrets.RELEASE_SITE_SSH_KEY }}
          port: ${{ secrets.RELEASE_SITE_SSH_PORT }}
          source: "./trackme_${{ env.version_id }}.tgz,./README.md,release_notes/${{ env.version }}.md,./release-sha256.txt"
          target: "/var/www/trackme-solutions.com/downloads/trackme-app-on-soar/trackme_${{ env.version_id }}"
          strip_components: 1
